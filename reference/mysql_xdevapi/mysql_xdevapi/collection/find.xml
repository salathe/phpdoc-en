<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="mysql-xdevapi-collection.find" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Collection::find</refname>
  <refpurpose>Search for document</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mysql_xdevapi\CollectionFind</type><methodname>mysql_xdevapi\Collection::find</methodname>
   <methodparam choice="opt"><type>string</type><parameter>search_condition</parameter></methodparam>
  </methodsynopsis>
  <para>
   Search a database collection for a document or set of documents. The returned
   documents are contained in the CollectionFind object that can be used further 
   to fetch one or all the documents.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>search_condition</parameter></term>
    <listitem>
     <para>
      Although optional, normally a condition is defined to limit the results
      to a subset of documents.
     </para>
     <para>
      Multiple elements might build the condition and the syntax supports parameter binding. 
      The expression used as search condition must be a valid SQL expression.
      If no search condition is provided (field empty) then find('true') is assumed.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A CollectionFind object that can use used to verify the operation
   or fetch found documents.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>mysql_xdevapi\Collection::find</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

// Assuming $coll is a valid Collection object

$coll->add('{"name": "Marco",      "age": 19, "job": "Programmatore"}')->execute();
$coll->add('{"name": "Lonardo",    "age": 59, "job": "Paninaro"}')->execute();
$coll->add('{"name": "Riccardo",   "age": 27, "job": "Cantante"}')->execute();
$coll->add('{"name": "Carlotta",   "age": 23, "job": "Programmatrice"}')->execute();
$coll->add('{"name": "Carlo",      "age": 25, "job": "Programmatore"}')->execute();
$coll->add('{"name": "Mariangela", "age": 41, "job": "Programmatrice"}')->execute();
$coll->add('{"name": "Alfredo",    "age": 27, "job": "Programmatore"}')->execute();
$coll->add('{"name": "Antonella",  "age": 42, "job": "Studente"}')->execute();
$coll->add('{"name": "Monica",     "age": 35, "job": "Ballerino"}')->execute();
$coll->add('{"name": "Giulio",     "age": 29, "job": "Disoccupato"}')->execute();
$coll->add('{"name": "Lucia",      "age": 47, "job": "Barista"}')->execute();
$coll->add('{"name": "Filippo",    "age": 31, "job": "Spazzino"}')->execute();
$coll->add('{"name": "Alessandra", "age": 15, "job": "Barista"}')->execute();
$coll->add('{"name": "Massimo",    "age": 22, "job": "Programmatore"}')->execute();
$coll->add('{"name": "Carlo",      "age": 37, "job": "Calciatore"}')->execute();

/*
   This query will look for up to 2 documents in the Collection sorted by age (descending),
   the documents must have the job 'Programmatore' and the age field higher or equal to 20

   The actual resulting documents are 'Carlo' and 'Alfredo'
*/

$obj  = $coll->find('job like :job and age > :age')->fields('age');
$res  = $obj->bind(['job' => 'Programmatore', 'age' => 20])->sort('age desc')->limit(2);
$data = $res->execute()->fetchAll();

// The search condition mighe also be very complex and use multiple functions
$res  = $coll->find('(1>5) IN (true,false) && {"title":"Spavatore"} NOT IN jobs && CAST(_id AS SIGNED) > 2')->execute();

?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
