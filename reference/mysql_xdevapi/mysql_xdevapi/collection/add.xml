<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="mysql-xdevapi-collection.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Collection::add</refname>
  <refpurpose>Add collection document</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mysql_xdevapi\Result</type><methodname>mysql_xdevapi\Collection::add</methodname>
   <methodparam><type>mixed</type><parameter>document</parameter></methodparam>
  </methodsynopsis>
  <para>
   Triggers the insertion of the given document(s) into the collection, and 
   multiple variants of this method are supported. Options include:
  </para>
  <orderedlist>
   <listitem>
     <para>
      Add a single document as a JSON string.
     </para>
   </listitem>
   <listitem>
     <para>
      Add a single document as an array as: 
      <literal>[ 'field' => 'value', 'field2' => 'value2' ... ]</literal>
    </para>
   </listitem>
   <listitem>
    <para>
      A mix of of both, and multiple documents can be added in the same operation.
    </para>
   </listitem>
  </orderedlist>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>document</parameter></term>
    <listitem>
     <para>
      One or multiple documents, and this can be either JSON or an array of fields with 
      their associated values. This cannot be an empty array.
     </para>
     <para>
      The MySQL server automatically generates unique <literal>_id</literal> values for
      each document, although this can be manually added as well. This value must be
      unique as otherwise the add operation will fail.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A Result object that can be used to query the number of affected items, the
   number warnings generated by the operation, or to fetch a list of generated IDs 
   for the inserted documents.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>mysql_xdevapi\Collection::add</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$schema = $session->getSchema("test");
$coll   = $schema->getCollection("test_collection");

// Add two documents, and _id is generated by the server
$coll->add('{"name": "Marco",      "age": 19, "job": "Programmatore"}')->execute();
$coll->add('{"name": "Lonardo",    "age": 59, "job": "Paninaro"}')->execute();

// Two two more documents but manually provide _id
// Note: manually adding _id is not recommended, and they must be unique
$coll->add(
    ["_id" => "1", "name" => "Sakila", "age" => 18, "job" => "Student"],
    ["_id" => "2", "name" => "Mike", "age" => 39, "job" => "Manager"]
    )->execute();

// Add two more documents using a single JSON object
$res = $coll->add(
  '{"name": "Marco",
		"jobs": [{"title":"Mangiatore","Salary":1000},{"title":"Ciarlatano","Salary":12000}],
		"hobby": ["Spavare","Soffiare Minestrine"], "code":0}',
  '{"name": "Lucrezia",
		"jobs": [{"title":"Urlatrice","Salary":2000},{"title":"Parlatrice","Salary":3400}],
		"hobby": ["Cucinare","Guidare auto sportive","Cavalcare"], "code":1}')->execute();

// Fetch a list of generated ID's and print
$ids = $res->getGeneratedIds();
print_r($ids);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Array
(
    [0] => 00005ad4d63c000000000000000a
    [1] => 00005ad4d63c000000000000000b
)]]>
   </screen>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
