<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- Generated by xml_proto.php v2.4. Found in /scripts directory of phpdoc. -->
<appendix xml:id="filter.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <variablelist>
  <varlistentry xml:id="constant.input-post">
   <term>
    <constant>INPUT_POST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.post">POST</link> variables.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.input-get">
   <term>
    <constant>INPUT_GET</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.get">GET</link> variables.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.input-cookie">
   <term>
    <constant>INPUT_COOKIE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.cookies">COOKIE</link> variables.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.input-env">
   <term>
    <constant>INPUT_ENV</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.environment">ENV</link> variables.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.input-server">
   <term>
    <constant>INPUT_SERVER</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.server">SERVER</link> variables.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.input-session">
   <term>
    <constant>INPUT_SESSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.session">SESSION</link> variables.
    (not implemented yet)
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.input-request">
   <term>
    <constant>INPUT_REQUEST</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     <link linkend="reserved.variables.request">REQUEST</link> variables.
    (not implemented yet)
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-none">
   <term>
    <constant>FILTER_FLAG_NONE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     No flags.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-require-scalar">
   <term>
    <constant>FILTER_REQUIRE_SCALAR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
      Flag used to require scalar as input
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-require-array">
   <term>
    <constant>FILTER_REQUIRE_ARRAY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
      Require an array as input. 
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-force-array">
   <term>
    <constant>FILTER_FORCE_ARRAY</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Always returns an array.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-null-on-failure">
   <term>
    <constant>FILTER_NULL_ON_FAILURE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Use NULL instead of FALSE on failure. 
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-int">
   <term>
    <constant>FILTER_VALIDATE_INT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "int" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-boolean">
   <term>
    <constant>FILTER_VALIDATE_BOOLEAN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "boolean" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-float">
   <term>
    <constant>FILTER_VALIDATE_FLOAT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "float" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-regexp">
   <term>
    <constant>FILTER_VALIDATE_REGEXP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "validate_regexp" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-url">
   <term>
    <constant>FILTER_VALIDATE_URL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "validate_url" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-email">
   <term>
    <constant>FILTER_VALIDATE_EMAIL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "validate_email" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-validate-ip">
   <term>
    <constant>FILTER_VALIDATE_IP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "validate_ip" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-default">
   <term>
    <constant>FILTER_DEFAULT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
    ID of default ("string") filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-unsafe-raw">
   <term>
    <constant>FILTER_UNSAFE_RAW</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "unsafe_raw" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-string">
   <term>
    <constant>FILTER_SANITIZE_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "string" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-stripped">
   <term>
    <constant>FILTER_SANITIZE_STRIPPED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "stripped" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-encoded">
   <term>
    <constant>FILTER_SANITIZE_ENCODED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "encoded" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-special-chars">
   <term>
    <constant>FILTER_SANITIZE_SPECIAL_CHARS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "special_chars" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-email">
   <term>
    <constant>FILTER_SANITIZE_EMAIL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "email" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-url">
   <term>
    <constant>FILTER_SANITIZE_URL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "url" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-number-int">
   <term>
    <constant>FILTER_SANITIZE_NUMBER_INT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "number_int" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-number-float">
   <term>
    <constant>FILTER_SANITIZE_NUMBER_FLOAT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "number_float" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-sanitize-magic-quotes">
   <term>
    <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "magic_quotes" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-callback">
   <term>
    <constant>FILTER_CALLBACK</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     ID of "callback" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-allow-octal">
   <term>
    <constant>FILTER_FLAG_ALLOW_OCTAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow octal notation (<literal>0[0-7]+</literal>) in "int" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-allow-hex">
   <term>
    <constant>FILTER_FLAG_ALLOW_HEX</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow hex notation (<literal>0x[0-9a-fA-F]+</literal>) in "int" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-strip-low">
   <term>
    <constant>FILTER_FLAG_STRIP_LOW</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Strip characters with ASCII value less than 32.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-strip-high">
   <term>
    <constant>FILTER_FLAG_STRIP_HIGH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Strip characters with ASCII value greater than 127.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-encode-low">
   <term>
    <constant>FILTER_FLAG_ENCODE_LOW</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Encode characters with ASCII value less than 32.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-encode-high">
   <term>
    <constant>FILTER_FLAG_ENCODE_HIGH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Encode characters with ASCII value greater than 127.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-encode-amp">
   <term>
    <constant>FILTER_FLAG_ENCODE_AMP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Encode <literal>&amp;</literal>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-no-encode-quotes">
   <term>
    <constant>FILTER_FLAG_NO_ENCODE_QUOTES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Don't encode <literal>'</literal> and <literal>"</literal>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-empty-string-null">
   <term>
    <constant>FILTER_FLAG_EMPTY_STRING_NULL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     (No use for now.)
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-allow-fraction">
   <term>
    <constant>FILTER_FLAG_ALLOW_FRACTION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow fractional part in "number_float" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-allow-thousand">
   <term>
    <constant>FILTER_FLAG_ALLOW_THOUSAND</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow thousand separator (<literal>,</literal>) in "number_float" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-allow-scientific">
   <term>
    <constant>FILTER_FLAG_ALLOW_SCIENTIFIC</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow scientific notation (<literal>e</literal>, <literal>E</literal>) in
     "number_float" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-path-required">
   <term>
    <constant>FILTER_FLAG_PATH_REQUIRED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Require path in "validate_url" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-query-required">
   <term>
    <constant>FILTER_FLAG_QUERY_REQUIRED</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Require query in "validate_url" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-ipv4">
   <term>
    <constant>FILTER_FLAG_IPV4</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow only IPv4 address in "validate_ip" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-ipv6">
   <term>
    <constant>FILTER_FLAG_IPV6</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Allow only IPv6 address in "validate_ip" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-no-res-range">
   <term>
    <constant>FILTER_FLAG_NO_RES_RANGE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Deny reserved addresses in "validate_ip" filter.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.filter-flag-no-priv-range">
   <term>
    <constant>FILTER_FLAG_NO_PRIV_RANGE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Deny private addresses in "validate_ip" filter.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->