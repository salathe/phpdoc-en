<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 336263 $ -->

<chapter xml:id="mongodb.tutorial.library" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Using the library</title>

 <para>
  After the initial set-up, we continue explaining how to get started with the
  MongoDB driver and library for HHVM to write our first project.
 </para>

  <section>
   <title>PHP Library (PHPLIB)</title>

   <para>
			The last thing we still need to install to get started on the application
			itself, is the PHP library.
   </para>

   <para>
    The library needs to be installed with Composer. In your project directory
    (<code>/var/www/html/my-first-project</code>) type:

    <programlisting role="shell">
curl -sS https://getcomposer.org/installer -o installer.php
hhvm installer.php
rm installer.php
    </programlisting>
   </para>

   <para>
    This downloads and installs Composer. Wherever it says "Use it: php
    composer.phar", it of course means <literal>hhvm composer.phar</literal>.
   </para>

   <para>
With Composer installed, we can now install the library:

    <programlisting role="shell">
hhvm composer.phar require mongodb/mongodb
    </programlisting>
   </para>

   <para>
It outputs something akin to:

    <programlisting role="shell">
Using version ^0.2.0 for mongodb/mongodb
./composer.json has been created
Loading composer repositories with package information
Updating dependencies (including require-dev)
  - Installing mongodb/mongodb (0.2.0)
 Downloading: 100%         

Writing lock file
Generating autoload files
    </programlisting>
   </para>

   <para>
    And it has created several files (<code>composer.json</code>,
    <code>composer.lock</code>) as well as the <code>vendor</code> directory
    that contains the library.
   </para>
  </section>

  <section>
   <title>Using the Library</title>

   <para>
    Composer manages your dependencies, and will provide you with a loader that
    you include with the following at the start of your script:

    <programlisting role="php">
<![CDATA[
	<?php
	require 'vendor/autoload.php';
]]>
    </programlisting>
   </para>

   <para>
    With this done, you can now use any of the functionality as described in
    the <link xlink:href="&url.mongodb.library.apidocs;">documentation</link>.
   </para>

   <para>
    If you are familiar with the old driver, it should look too much out of
    place. The only big difference is that the
    <link xlink:href="&url.mongodb.library.apidocs;/class-MongoDB.Database.html">Database</link>
    class is only used for Database specific operations. The
    <link xlink:href="&url.wiki.crud;">CRUD</link> operations on the
    <link xlink:href="&url.mongodb.library.apidocs;/class-MongoDB.Collection.html">Collection</link>
    class are also renamed for clarity, and to be in accordance with a new
    language-agnostic
    <link xlink:href="&url.mongodb.crud;">specification</link>.
   </para>

   <para>
    As an example, this is how you insert a document into the
    <emphasis>beers</emphasis> collection of the <emphasis>demo</emphasis>
    database:

    <programlisting role="php">
<![CDATA[
	<?php
	require 'vendor/autoload.php'; // include Composer goodies

	$manager = new MongoDB\Driver\Manager("mongodb://localhost:27017");
	$collection = new MongoDB\Collection($manager, "demo.beers");

	$result = $collection->insertOne( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );

	echo "Inserted with Object ID '{$result->getInsertedId()}'";
	?>
]]>
    </programlisting>
   </para>

   <para>
    Instead of the original document being modified to add the newly generated
    <code>_id</code> field, this is now part of the result that comes back
    from the <code>insertOne</code> method.
   </para>

   <para>
    After insertion, you can of course also query the data that you have just
    inserted. For that, you use the <code>find</code> method which returns a
    cursor that you can iterate over:

    <programlisting role="php">
<![CDATA[
	<?php
	require 'vendor/autoload.php'; // include Composer goodies

	$manager = new MongoDB\Driver\Manager("mongodb://localhost:27017");
	$collection = new MongoDB\Collection($manager, "demo.beers");

	$result = $collection->find( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );

	foreach ($result as $entry)
	{
		echo $entry->_id, ': ', $entry->name, "\n";
	}
	?>
]]>
    </programlisting>
   </para>

   <para>
    You might have noticed that instead of accessing the <code>_id</code> and
    <code>name</code> fields is no longer done through an array access
    operator. Instead, they are now properties of a <code>stdClass</code>
    object. You can find more information on how serialisation and
    deserialisation between PHP variables and the BSON stored in MongoDB in
    the <xref linkend="mongodb.persistence"/> specification. 
   </para>
  </section>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
