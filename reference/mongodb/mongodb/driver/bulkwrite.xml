<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ --> 

<phpdoc:classref xml:id="class.mongodb-driver-bulkwrite" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The MongoDB\Driver\BulkWrite class</title>
 <titleabbrev>MongoDB\Driver\BulkWrite</titleabbrev>

 <partintro>

<!-- {{{ MongoDB\Driver\BulkWrite intro -->
  <section xml:id="mongodb-driver-bulkwrite.intro">
   &reftitle.intro;
   <para>
    The <classname>MongoDB\Driver\BulkWrite</classname> collects one ore more write
    operations that should be sent to the server in writees.
   </para>
   <para>
    The <classname>MongoDB\Driver\Manager</classname> has 3 wrapper methods for single-item writees for simplicity:
    <simplelist>
     <member><methodname>MongoDB\Driver\Manager::executeInsert</methodname></member>
     <member><methodname>MongoDB\Driver\Manager::executeDelete</methodname></member>
     <member><methodname>MongoDB\Driver\Manager::executeUpdate</methodname></member>
    </simplelist>
    along with the main method to execute a write: <methodname>MongoDB\Driver\Manager::executeBulkWrite</methodname>
   </para>
   <para>
    When constructing a write, you must define if the write should be executed
    in order (default), or if it can be reordered by the server.
   </para>
   <para>
    Ordered write write operations are sent to the server, in the order
    provided, for serial execution. If a write fails, any remaining operations
    will be aborted.
   </para>
   <para>
    Unordered operations are sent to the server in arbitrary order
    where they may be executed in parallel. Any errors that occur are reported
    after all operations have been attempted.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongodb-driver-bulkwrite.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDB\Driver\BulkWrite</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier>
     <ooclass>
      <classname>MongoDB\Driver\BulkWrite</classname>
     </ooclass>
     
     <oointerface>
      <interfacename>Countable</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodb-driver-bulkwrite')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="mongodb-driver-bulkwrite.examples">
   &reftitle.examples;

   <example>
    <title>Mixed write operations sent in groupped writees</title>
    <para>
     Mixing write operations (insert/update/delete) will create internal sub-writees and will be sent sequentially to the server.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$write = new MongoDB\Driver\BulkWrite(true);
$write->insert($a);
$write->update($b, $obj);
$write->update($c, $obj);
$write->insert($d);
$write->insert($e);
$write->delete($f);
?>
]]>
    </programlisting>
    <para>
     Will result in 4 writees (round-trips) being executed.
    </para>
   </example>
   <example>
    <title>Ordered BulkWrite causing error</title>
    <programlisting role="php">
<![CDATA[
<?php
$write = new MongoDB\Driver\BulkWrite(false);
$write->delete([]);
$write->insert(["_id" => 1]);
$write->insert(["_id" => 2]);

$write->insert(["_id" => 3, "hello" => "world"]);
$write->update(["_id" => 3], ['$set' => ["hello" => "earth"]]);

$write->insert(["_id" => 4, "hello" => "pluto"]);
$write->update(["_id" => 4], ['$set' => ["hello" => "moon"]]);

$write->insert(["_id" => 3]);
$write->insert(["_id" => 4]);
$write->insert(["_id" => 5]);

$manager = new MongoDB\Driver\Manager("mongodb://localhost:27017");
$writeConcern = new MongoDB\Driver\WriteConcern(MongoDB\Driver\WriteConcern::MAJORITY, 1000);
try {
    $result = $manager->executeBulkWrite("databaseName.collectionName", $write, $writeConcern);
} catch(MongoDB\Driver\DuplicateKeyException $ex) {
    $result = $ex->getWriteResult();
    printf("Inserted %d document(s)\n", $result->getInsertedCount());
    printf("Updated  %d document(s)\n", $result->getModifiedCount());

    /* If the WriteConcern could not be fullfilled */
    if ($writeConcernError = $result->getWriteConcernError()) {
        printf("%s (%d): %s\n",
            $writeConcernError->getMessage(),
            $writeConcernError->getCode(),
            var_export($writeConcernError->getInfo(), true)
        );
    }

    /* If the write could not happen at all */
    foreach ($result->getWriteErrors() as $writeError) {
        printf("Operation#%d: %s (%d)\n",
            $writeError->getIndex(),
            $writeError->getMessage(),
            $writeError->getCode()
        );
    }
} catch(MongoDB\Driver\AuthenticationException $ex) {
} catch(MongoDB\Driver\ConnectionException $ex) {
} catch(MongoDB\Driver\RuntimeException $ex) {
}

?>
]]>
    </programlisting>
   </example>
   &example.outputs;
   <screen>
<![CDATA[
Inserted 4 document(s)
Updated  2 document(s)
Operation#7: E11000 duplicate key error index: databaseName.collectionName.$_id_ dup key: { : 3 } (11000)
]]>
   </screen>
   <para>
    If the WriteConcern could not be fullfilled, the example above would output something like:
   </para>
   <screen>
<![CDATA[
Inserted 4 document(s)
Updated  2 document(s)
waiting for replication timed out (64): array (
  'wtimeout' => true,
)
Operation#7: E11000 duplicate key error index: databaseName.collectionName.$_id_ dup key: { : 3 } (11000)
]]>
   </screen>
   <para>
    Executing the same example, changing the order to false:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$write = new MongoDB\Driver\BulkWrite(false);
/* ... */
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Inserted 5 document(s)
Updated  2 document(s)
Operation#7: E11000 duplicate key error index: databaseName.collectionName.$_id_ dup key: { : 3 } (11000)
Operation#8: E11000 duplicate key error index: databaseName.collectionName.$_id_ dup key: { : 4 } (11000)

]]>
   </screen>
  </section>

  <section xml:id="mongodb-driver-bulkwrite.seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDB\Driver\Manager::executeBulkWrite</methodname></member>
    <member><classname>MongoDB\Driver\WriteResult</classname></member>
    <member><classname>MongoDB\Driver\WriteConcern</classname></member>
    <member><classname>MongoDB\Driver\WriteConcernError</classname></member>
    <member><classname>MongoDB\Driver\WriteError</classname></member>
   </simplelist>
  </section>

 </partintro>

 &reference.mongodb.mongodb.driver.entities.bulkwrite;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
