<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongocommandcursor.info" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCommandCursor::info</refname>
  <refpurpose>Gets the query, fields, limit, and skip for this cursor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoCommandCursor::info</methodname>
   <void/>
  </methodsynopsis>
  <para>
   This can be called before or after the query.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Returns the namespace, limit, skip, query, fields, connection and iteration
   information for this cursor.  
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCommandCursor::info</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient();
$c = $m->test->test;
$cursor = $c->commandCursor( [
    'aggregate' => 'test', 
    'pipeline' => [ 
        [ '$match' => [ '_id' => [ '$exists' => true ] ] ],
    ]
] );

echo "Before iteration started:\n";
var_dump($cursor->info());

echo "Aftere iteration started:\n";
$cursor->rewind();
var_dump($cursor->info());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Before iteration started:
array(8) {
  'ns' =>
  string(9) "test.test"
  'limit' =>
  int(0)
  'batchSize' =>
  int(0)
  'skip' =>
  int(0)
  'flags' =>
  int(0)
  'query' =>
  array(2) {
    'aggregate' =>
    string(4) "test"
    'pipeline' =>
    array(1) {
      [0] =>
      array(1) {
        '$match' =>
        array(1) {
          '_id' =>
          array(1) {
            '$exists' =>
            bool(true)
          }
        }
      }
    }
  }
  'fields' =>
  NULL
  'started_iterating' =>
  bool(false)
}
Aftere iteration started:
array(17) {
  'ns' =>
  string(9) "test.test"
  'limit' =>
  int(0)
  'batchSize' =>
  int(101)
  'skip' =>
  int(0)
  'flags' =>
  int(0)
  'query' =>
  array(3) {
    'aggregate' =>
    string(4) "test"
    'pipeline' =>
    array(1) {
      [0] =>
      array(1) {
        '$match' =>
        array(1) {
          '_id' =>
          array(1) {
            '$exists' =>
            bool(true)
          }
        }
      }
    }
    'cursor' =>
    array(1) {
      'batchSize' =>
      int(101)
    }
  }
  'fields' =>
  NULL
  'started_iterating' =>
  bool(true)
  'id' =>
  int(0)
  'at' =>
  int(0)
  'numReturned' =>
  int(0)
  'server' =>
  string(24) "localhost:27017;-;.;2316"
  'host' =>
  string(9) "localhost"
  'port' =>
  int(27017)
  'connection_type_desc' =>
  string(10) "STANDALONE"
  'firstBatchAt' =>
  int(0)
  'firstBatchNumReturned' =>
  int(1)
}
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
