<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongocommandcursor.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCommandCursor::__construct</refname>
  <refpurpose>Create a new command cursor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>MongoCommandCursor::__construct</methodname>
   <methodparam><type>MongoClient</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>ns</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>command</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   In many instances, you do not have to create a
   <classname>MongoCommandCursor</classname> manually, but instead one of the
   helper functions such as
   <methodname>MongoCollection::aggregateCursor</methodname> and
   <methodname>MongoCollection::parallelCollectionScan</methodname>. However,
   if the server adds new commands that can return cursors, then manually
   creating <classname>MongoCommandCursor</classname> objects is required.
   However, it might be easier to use the
   <methodname>MongoCommandCursor::createFromDocument</methodname> instead.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>connection</parameter>
     </term>
     <listitem>
      <para>
       Database connection.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>ns</parameter>
     </term>
     <listitem>
      <para>
       Full name of database and collection.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>command</parameter>
     </term>
     <listitem>
      <para>
       Database command.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the new cursor.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCommandCursor</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$d = $m->demo;

// setup the pipeline
$pipeline = [
    [ '$group' => [
        '_id' => '$country_code',
        'timezones' => [ '$addToSet' => '$timezone' ]
    ] ],
    [ '$sort' => [ '_id' => 1 ] ],
];

// run the command, and return a MongoCommandCursor object
$r = $d->commandCursor(
    $m, // MongoClient object
    'demo.cities', // namespace
    [
        'aggregate' => 'cities',
        'pipeline' => $pipeline,
    ]
);

foreach($r as $document) {
   â€¦
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCommandCursor::createFromDocument</function></member>
   <member><function>MongoCollection::aggregateCursor</function></member>
   <member><function>MongoCollection::parallelCollectionScan</function></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
