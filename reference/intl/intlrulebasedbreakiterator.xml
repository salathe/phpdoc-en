<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<phpdoc:classref xml:id="class.intlrulebasedbreakiterator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The IntlRuleBasedBreakIterator class</title>
 <titleabbrev>IntlRuleBasedBreakIterator</titleabbrev>

 <partintro>

<!-- {{{ IntlRuleBasedBreakIterator intro -->
  <section xml:id="intlrulebasedbreakiterator.intro">
   &reftitle.intro;
   <para>
    A subclass of <classname>IntlBreakIterator</classname> that encapsulates
    ICU break iterators whose behavior is specified using a set of rules. This
    is the most common kind of break iterators.
   </para>
   <para>
    These rules are described in the <link
    xlink:href="&url.icu.rulebasedbreakiteratorguide;">ICU Boundary Analysis
    User Guide</link>.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="intlrulebasedbreakiterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>IntlRuleBasedBreakIterator</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>IntlRuleBasedBreakIterator</classname>
     </ooclass>

     <ooclass>
      <modifier>extends</modifier>
      <classname>IntlBreakIterator</classname>
     </ooclass>

     <oointerface>
      <interfacename>Traversable</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">Constants</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.done">IntlRuleBasedBreakIterator::DONE</varname>
     <initializer>-1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-none">IntlRuleBasedBreakIterator::WORD_NONE</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-none-limit">IntlRuleBasedBreakIterator::WORD_NONE_LIMIT</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-number">IntlRuleBasedBreakIterator::WORD_NUMBER</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-number-limit">IntlRuleBasedBreakIterator::WORD_NUMBER_LIMIT</varname>
     <initializer>200</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-letter">IntlRuleBasedBreakIterator::WORD_LETTER</varname>
     <initializer>200</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-letter-limit">IntlRuleBasedBreakIterator::WORD_LETTER_LIMIT</varname>
     <initializer>300</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-kana">IntlRuleBasedBreakIterator::WORD_KANA</varname>
     <initializer>300</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-kana-limit">IntlRuleBasedBreakIterator::WORD_KANA_LIMIT</varname>
     <initializer>400</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-ideo">IntlRuleBasedBreakIterator::WORD_IDEO</varname>
     <initializer>400</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.word-ideo-limit">IntlRuleBasedBreakIterator::WORD_IDEO_LIMIT</varname>
     <initializer>500</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.line-soft">IntlRuleBasedBreakIterator::LINE_SOFT</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.line-soft-limit">IntlRuleBasedBreakIterator::LINE_SOFT_LIMIT</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.line-hard">IntlRuleBasedBreakIterator::LINE_HARD</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.line-hard-limit">IntlRuleBasedBreakIterator::LINE_HARD_LIMIT</varname>
     <initializer>200</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.sentence-term">IntlRuleBasedBreakIterator::SENTENCE_TERM</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.sentence-term-limit">IntlRuleBasedBreakIterator::SENTENCE_TERM_LIMIT</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.sentence-sep">IntlRuleBasedBreakIterator::SENTENCE_SEP</varname>
     <initializer>100</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="intlrulebasedbreakiterator.constants.sentence-sep-limit">IntlRuleBasedBreakIterator::SENTENCE_SEP_LIMIT</varname>
     <initializer>200</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.intlrulebasedbreakiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />

    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.intlbreakiterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />

   </classsynopsis>
<!-- }}} -->

  </section>

<!-- {{{ IntlRuleBasedBreakIterator constants -->
  <section xml:id="intlrulebasedbreakiterator.constants">
   &reftitle.constants;
   <variablelist>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.done">
     <term><constant>IntlRuleBasedBreakIterator::DONE</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-none">
     <term><constant>IntlRuleBasedBreakIterator::WORD_NONE</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-none-limit">
     <term><constant>IntlRuleBasedBreakIterator::WORD_NONE_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-number">
     <term><constant>IntlRuleBasedBreakIterator::WORD_NUMBER</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-number-limit">
     <term><constant>IntlRuleBasedBreakIterator::WORD_NUMBER_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-letter">
     <term><constant>IntlRuleBasedBreakIterator::WORD_LETTER</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-letter-limit">
     <term><constant>IntlRuleBasedBreakIterator::WORD_LETTER_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-kana">
     <term><constant>IntlRuleBasedBreakIterator::WORD_KANA</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-kana-limit">
     <term><constant>IntlRuleBasedBreakIterator::WORD_KANA_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-ideo">
     <term><constant>IntlRuleBasedBreakIterator::WORD_IDEO</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.word-ideo-limit">
     <term><constant>IntlRuleBasedBreakIterator::WORD_IDEO_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.line-soft">
     <term><constant>IntlRuleBasedBreakIterator::LINE_SOFT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.line-soft-limit">
     <term><constant>IntlRuleBasedBreakIterator::LINE_SOFT_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.line-hard">
     <term><constant>IntlRuleBasedBreakIterator::LINE_HARD</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.line-hard-limit">
     <term><constant>IntlRuleBasedBreakIterator::LINE_HARD_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.sentence-term">
     <term><constant>IntlRuleBasedBreakIterator::SENTENCE_TERM</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.sentence-term-limit">
     <term><constant>IntlRuleBasedBreakIterator::SENTENCE_TERM_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.sentence-sep">
     <term><constant>IntlRuleBasedBreakIterator::SENTENCE_SEP</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

    <varlistentry xml:id="intlrulebasedbreakiterator.constants.sentence-sep-limit">
     <term><constant>IntlRuleBasedBreakIterator::SENTENCE_SEP_LIMIT</constant></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>

   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.intl.entities.intlrulebasedbreakiterator;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
