<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<chapter xml:id="parle.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;

 <section xml:id="parle.examples.lexer">
  <title>Lexer examples</title>
  <example>
   <title>Tokenize comma separated integer list</title>
   <programlisting role="php">
<![CDATA[
<?php

use Parle\{Token, Lexer, LexerException};

/* name => id */
$token = array(
        "EOI" => 0,
        "COMMA" => 1,
        "CRLF" => 2,
        "DECIMAL" => 3,
);
/* id => name */
$token_rev = array_flip($token);

$lex = new Lexer;
$lex->push("[\x2c]", $token["COMMA"]);
$lex->push("[\r][\n]", $token["CRLF"]);
$lex->push("[\d]+", $token["DECIMAL"]);
$lex->build();

$in = "0,1,2\r\n3,42,5\r\n6,77,8\r\n";

$lex->consume($in);

do {
        $lex->advance();
        $tok = $lex->getToken();

        if (Token::UNKNOWN == $tok->id) {
                throw new LexerException("Unknown token '{$tok->value}' at offset {$tok->offset}.");
        }

        echo "TOKEN: ", $token_rev[$tok->id], PHP_EOL;
} while (Token::EOI != $tok->id);
]]>
   </programlisting>
  </example>
  <example>
   <title>Tokenize assign statement</title>
   <programlisting role="php">
<![CDATA[
<?php

use Parle\{Token, Lexer};

$lex = new Lexer;

$lex->push("\$[a-zA-Z_][a-zA-Z0-9_]*", 1);
$lex->push("=", 2);
$lex->push("\d+", 3);
$lex->push(";", 4);

$lex->build();

$lex->consume('$x = 42; $y = 24;');


do {
	$lex->advance();
	$tok = $lex->getToken();
	var_dump($tok);
} while (Token::EOI != $tok->id);
]]>
   </programlisting>
  </example>
 </section>
 <section xml:id="parle.examples.parser">
  <title>Parser examples</title>
  <example>
   <title>Simple calculator</title>
   <programlisting role="php">
<![CDATA[
<?php 

use Parle\{Parser, ParserException, Lexer, Token};

$p = new Parser;
$p->token("INTEGER");
$p->left("'+' '-' '*' '/'");

$p->push("start", "exp");
$add_idx = $p->push("exp", "exp '+' exp");
$sub_idx = $p->push("exp", "exp '-' exp");
$mul_idx = $p->push("exp", "exp '*' exp");
$div_idx = $p->push("exp", "exp '/' exp");
$int_idx = $p->push("exp", "INTEGER");

$p->build();

$lex = new Lexer;
$lex->push("[+]", $p->tokenId("'+'"));
$lex->push("[-]", $p->tokenId("'-'"));
$lex->push("[*]", $p->tokenId("'*'"));
$lex->push("[/]", $p->tokenId("'/'"));
$lex->push("\\d+", $p->tokenId("INTEGER"));
$lex->push("\\s+", Token::SKIP);

$lex->build();

$exp = array(
	"1 + 1",
	"33 / 10",
	"100 * 45",
	"17 - 45",
);

foreach ($exp as $in) {
	if (!$p->validate($in, $lex)) {
		throw new ParserException("Failed to validate input");
	}

	$p->consume($in, $lex);

	while (Parser::ACTION_ERROR != $p->action && Parser::ACTION_ACCEPT != $p->action) {
		switch ($act) {
			case Parser::ACTION_ERROR:
				throw new ParserException("Parser error");
				break;
			case Parser::ACTION_SHIFT:
			case Parser::ACTION_GOTO:
			case Parser::ACTION_ACCEPT:
				break;
			case Parser::ACTION_REDUCE:
				switch ($p->reduceId) {
					case $add_idx:
						$l = $p->sigil(0);
						$r = $p->sigil(2);
						echo "$l + $r = " . ($l + $r) . "\n";
						break;
					case $sub_idx:
						$l = $p->sigil(0);
						$r = $p->sigil(2);
						echo "$l - $r = " . ($l - $r) . "\n";
						break;
					case $mul_idx:
						$l = $p->sigil(0);
						$r = $p->sigil(2);
						echo "$l * $r = " . ($l * $r) . "\n";
						break;
					case $div_idx:
						$l = $p->sigil(0);
						$r = $p->sigil(2);
						echo "$l / $r = " . ($l / $r) . "\n";
						break;
				}
			break;
		}
		$p->advance();
	}
}
]]>
   </programlisting>
  </example>
  <example>
   <title>Parse words out from a sentense</title>
   <programlisting role="php">
<![CDATA[
<?php

use Parle\{Lexer, Token, Parser, ParserException};

$p = new Parser;
$p->token("WORD");
$p->push("START", "SENTENCE");
$p->push("SENTENCE", "WORDS");
$words_idx = $p->push("WORDS", "WORDS WORD");
$word_idx = $p->push("WORDS", "WORD");
$p->build();

$lex = new Lexer;
$lex->push("[^\s]{-}[\.,\:\;\?]+", $p->tokenId("WORD"));
$lex->push("[\s\.,\:\;\?]+", Token::SKIP);
$lex->build();

$in = "Dis-moi oÃ¹ est ton papa?";
$p->consume($in, $lex);
do {
	switch ($p->action) {
	case Parser::ACTION_ERROR:
		throw new ParserException("Error");
		break;
	case Parser::ACTION_SHIFT:
	case Parser::ACTION_GOTO:
	case Parser::ACTION_ACCEPT:
		/* var_dump($p->trace());*/
		break;
	case Parser::ACTION_REDUCE:
		$rid = $p->reduceId();
		if ($rid == $word_idx) {
			var_dump($p->sigil(0));
		} if ($rid == $words_idx) {
			var_dump($p->sigil(1));
		}
		break;
	}
	$p->advance();
} while (Parser::ACTION_ERROR != $p->action && Parser::ACTION_ACCEPT != $p->action);
]]>
   </programlisting>
  </example>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
