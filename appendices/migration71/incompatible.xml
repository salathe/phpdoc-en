<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<sect1 xml:id="migration71.incompatible">
 <title>Backward incompatible changes</title>

 <sect2 xml:id="migration71.incompatible.too-few-arguments-exception">
  <title>Throw on passing too few function arguments</title>

  <para>
   Previously, a warning would be emitted for invoking user-defined functions
   with too few arguments. Now, this warning has been promoted to an Error
   exception. This change only applies to user-defined functions, not internal
   functions. For example:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test($param){}
test();
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions">
  <title>Forbid dynamic calls to scope introspection functions</title>

  <para>
   Dynamic calls for certain functions have been forbidden (in the form of
   <literal>$func()</literal> or <literal>array_map('extract', ...)</literal>,
   etc). These functions either inspect or modify another scope, and present
   with them ambiguous and unreliable behavior. The functions are as follows:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>assert</function> - with a string as the first argument
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>compact</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>extract</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_arg</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_num_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>get_defined_vars</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>mb_parse_str</function> - with one arg
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>parse_str</function> - with one arg
    </simpara>
   </listitem>
  </itemizedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
(function () {
    $func = 'func_num_args';
    $func();
})();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: Cannot call func_num_args() dynamically in %s on line %d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.invalid-class-names">
  <title>Invalid class, interface, and trait names</title>

  <para>
   The following names cannot be used to name classes, interfaces, or traits:
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>void</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>iterable</type></simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.numerical-strings-scientific-notation">
  <title>Numerical string conversions now respect scientific notation</title>

  <para>
   Integer operations and conversions on numerical strings now respect
   scientific notation. This also includes the <literal>(int)</literal> cast
   operation, and the following functions: <function>intval</function> (where
   the base is 10), <function>settype</function>, <function>decbin</function>,
   <function>decoct</function>, and <function>dechex</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fixes-to-mt_rand-algorithm">
  <title>Fixes to <function>mt_rand</function> algorithm</title>

  <para>
   <function>mt_rand</function> will now default to using the fixed version of
   the Mersenne Twister algorithm. If deterministic output from
   <function>mt_srand</function> was relied upon, then the
   <constant>MT_RAND_PHP</constant> with the ability to preserve the old
   (incorrect) implementation via an additional optional second parameter to
   <function>mt_srand</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.rand-srand-aliases">
  <title>
   <function>rand</function> aliased to <function>mt_rand</function> and
   <function>srand</function> aliased to <function>mt_srand</function>
  </title>

  <para>
   <function>rand</function> and <function>srand</function> have now been made
   aliases to <function>mt_rand</function> and <function>mt_srand</function>,
   respectively. This means that the output for the following functions have
   changes: <function>rand</function>, <function>shuffle</function>,
   <function>str_shuffle</function>, and <function>array_rand</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.delete-control-character-in-identifiers">
  <title>Disallow the ASCII delete control character in identifiers</title>

  <para>
   The ASCII delete control character (<literal>0x7F</literal>) can no longer
   be used in identifiers that are not quoted.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.error_log-syslog">
  <title>
   <parameter>error_log</parameter> changes with <literal>syslog</literal>
   value
  </title>

  <para>
   If the <parameter>error_log</parameter> ini setting is set to
   <literal>syslog</literal>, the PHP error levels are mapped to the syslog
   error levels. This brings finer differentiation in the error logs in
   contrary to the previous approach where all the errors are logged with the
   notice level only.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.dont-call-destructors">
  <title>Do not call destructors on incomplete objects</title>

  <para>
   Destructors are now never called for objects that throw an exception during
   the execution of their constructor. In previous versions this behavior
   depended on whether the object was referenced outside the construcor (e.g.
   by an exception backtrace).
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.call_user_func-with-ref-args">
  <title>
   <function>call_user_func</function> handling of reference arguments
  </title>

  <para>
   <function>call_user_func</function> will now always generate a warning
   upon calls to functions that expect references as arguments. Previously
   this depended on whether the call was fully qualified.
  </para>
  <para>
   Additionally, <function>call_user_func</function> and
   <function>call_user_func_array</function> will no longer abort the function
   call in this case. The "expected reference" warning will be emitted, but the
   call will proceed as usual.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-index-operator">
  <title>
   The empty index operator is not supported for strings anymore
  </title>

  <para>
   Applying the empty index operator to a string (e.g. <literal>$str[] = $x</literal>)
   throws a fatal error instead of converting silently to array.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.removed-ini-directives">
  <title>Removed ini directives</title>

  <para>
   The following ini directives have been removed:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>session.entropy_file</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.entropy_length</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_function</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_bits_per_character</parameter>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration70.incompatible.array-order">
  <title>
   Array ordering when elements are automatically created during by reference
   assignments has changed
  </title>

  <para>
   The order of the elements in an array has changed when those elements have
   been automatically created by referencing them in a by reference
   assignment. For example:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.70;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.71;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
