<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Type Hinting</title>
  <para>
   PHP 5 introduces type hinting. Functions are now able to force parameters
   to be objects (by specifying the name of the class in the function
   prototype), interfaces, arrays (since PHP 5.1) or <type>callable</type>
   (since PHP 5.4). However, if <type>NULL</type> is used
   as the default parameter value, it will be allowed as an argument for any 
   later call.
  </para>
  
  <para>
   If class or interface is specified as type hint then all its children or
   implementations are allowed too.
  </para>
  
  <para>
   Type hints cannot be used with scalar types such as <type>int</type> or
   <type>string</type>.
   <link linkend="language.types.resource">Resources</link> and <link linkend="language.oop5.traits">Traits</link> are not allowed either.
  </para>
  
  <example>
   <title>Type Hinting examples</title>
    <programlisting role="php">
<![CDATA[
<?php
// An example class
class MyClass
{
    /**
     * A test function
     *
     * First parameter must be an object of type OtherClass
     */
    public function test(OtherClass $otherclass) {
        echo $otherclass->var;
    }


    /**
     * Another test function
     *
     * First parameter must be an array
     */
    public function test_array(array $input_array) {
        print_r($input_array);
    }
    
    /**
     * First parameter must be iterator
     */
    public function test_interface(Traversable $iterator) {
        echo get_class($iterator);
    }
    
    /**
     * First parameter must be callable
     */
    public function test_callable(callable $callback, $data) {
        call_user_func($callback, $data);
    }
}

// Another example class
class OtherClass {
    public $var = 'Hello World';
}
?>
]]>
   </programlisting>
   <para>
    Failing to satisfy the type hint results in a catchable fatal error.
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// An instance of each class
$myclass = new MyClass;
$otherclass = new OtherClass;

// Fatal Error: Argument 1 must be an object of class OtherClass
$myclass->test('hello');

// Fatal Error: Argument 1 must be an instance of OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Fatal Error: Argument 1 must not be null
$myclass->test(null);

// Works: Prints Hello World
$myclass->test($otherclass);

// Fatal Error: Argument 1 must be an array
$myclass->test_array('a string');

// Works: Prints the array
$myclass->test_array(array('a', 'b', 'c'));

// Works: Prints ArrayObject
$myclass->test_interface(new ArrayObject(array()));

// Works: Prints int(1)
$myclass->test_callable('var_dump', 1);
?>
]]>
   </programlisting>
   <para>
    Type hinting also works with functions:
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// An example class
class MyClass {
    public $var = 'Hello World';
}

/**
 * A test function
 *
 * First parameter must be an object of type MyClass
 */
function myFunction(MyClass $foo) {
    echo $foo->var;
}

// Works
$myclass = new MyClass;
myFunction($myclass);
?>
]]>
   </programlisting>
   <para>
    Type hinting allowing NULL value:
   </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Accepting NULL value */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
   </programlisting>
  </example>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
